{
    "description": "Represents an order placed by a user within the application, and operated on by internal agents, such as a barista.",
    "properties": {
        "uri": {
            "type": "string",
            "description": "URI of this object",
            "readonly": true
        },
        "type": {
            "type": "string",
            "description": "The type of drink being ordered",
            "enum": ["latte", "drip", "tea"]
        },
        "size": {
            "type": "string",
            "description": "The size of drink ordered",
            "enum": ["small", "medium", "large"]
        },
        "status": {
            "type": "string",
            "description": "Status of the product (drink) order",
            "enum": ["ordered", "in-process", "ready"]
        },
        "totalPrice": {
            "type": "number",
            "description": "Total price of the order for the user to pay"
        }
    },
    "links": [{
        "rel": "schema/rel/self",
        "href": "application/users/{userId}/orders/{orderId}",
        "method": "GET",
        "schema": {
            "$ref": "schema/models/Order"
        }
    }, {
        "rel": "schema/rel/monitor",
        "href": "application/users/{userId}/orders/{orderId}",
        "method": "GET",
        "schema": {
            "$ref": "schema/models/Order"
        }
    }, {
        "rel": "schema/rel/collection",
        "href": "application/users/{userId}/orders",
        "method": "GET",
        "schema": {
            "$ref": "schema/models/OrderList"
        }
    }, {
        "rel": "schema/rel/payment",
        "href": "application/users/{userId}/orders/{orderId}/payments",
        "method": "POST",
        "schema": {
            "$ref": "schema/models/Payment"
        },
        "filter": {
            "command": "commands/filter-rql.js",
            "arguments": {
                "user": "application/users/{userId}",
                "payments": "application/users/{userId}/orders/{orderId}/payments",
                "rql": "schema/rql/customer-needs-to-pay"
            }
        }
    }, {
        "rel": "schema/rel/edit",
        "href": "application/users/{userId}/orders/{orderId}",
        "method": "PUT",
        "schema": {
            "$ref": "schema/models/Order"
        },
        "filter": {
            "command": "commands/filter-rql.js",
            "arguments": {
                "user": "application/users/{userId}",
                "rql": "schema/rql/user-is-barista"
            }
        }
    }, {
        "rel": "schema/rel/receive-order",
        "href": "application/users/{userId}/orders/{orderId}",
        "method": "DELETE",
        "schema": {
            "$ref": "schema/models/Order"
        },
        "filter": {
            "command": "commands/filter-rql.js",
            "arguments": {
                "user": "application/users/{userId}",
                "payments": "application/users/{userId}/orders/{orderId}/payments",
                "order": "application/users/{userId}/orders/{orderId}",
                "rql": "schema/rql/customer-can-receive-order"
            }
        }
    }, {
        "rel": "schema/rel/remove",
        "href": "application/users/{userId}/orders/{orderId}",
        "method": "DELETE",
        "schema": {
            "$ref": "schema/models/Order"
        },
        "filter": {
            "command": "commands/filter-rql.js",
            "arguments": {
                "user": "application/users/{userId}",
                "rql": "schema/rql/user-is-customer"
            }
        }
    }]
}